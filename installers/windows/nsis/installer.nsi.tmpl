# -*- coding: utf-8 -*-
# vim: tabstop=2 shiftwidth=2 softtabstop=2 syntax=nsis
#
# Copyright (C) 2016-2019 GEM Foundation
#
# OpenQuake is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# OpenQuake is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with OpenQuake. If not, see <http://www.gnu.org/licenses/>.

!define /date MYTIMESTAMP "%y%m%d%H%M"
!define MYVERSION "2.99.0" # OpenQuake 2 tree
!define APP_NAME "OpenQuake Engine"
!define PRODUCT_NAME "${APP_NAME}"
!define WEB_SITE "https://github.com/gem/oq-engine"
!define VER_CODE "${MYVERSION}"
!define VER_BUILD "${MYTIMESTAMP}"
!define PRODUCT_VERSION "${VER_CODE}.${VER_BUILD}"
!define PUBLISHER "GEM Foundation"
!define COMP_NAME "GEM Foundation"
!define COPYRIGHT "https://github.com/gem/oq-engine/blob/master/LICENSE"
!define BITNESS "64"
!define ARCH_TAG ""
!define INSTALLER_NAME "OpenQuake_Engine_${VER_CODE}-${VER_BUILD}.exe"
!define PRODUCT_ICON "openquake.ico"
!define DESCRIPTION "The OpenQuake Engine is an open source software that provides calculation and assessment of seismic hazard, risk and decision-making tools via the data, methods and standards that are being developed by the GEM"
# installations on 64bit systems (code is 64bit only)
!define REG_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"

!include "FileFunc.nsh"
!include "WordFunc.nsh"
!include "x64.nsh"
!include "WinVer.nsh"

SetCompressor LZMA

RequestExecutionLevel User

# Add definition of custom macro
!macro CharStrip Char InStr OutVar
 Push '${InStr}'
 Push '${Char}'
  Call CharStrip
 Pop '${OutVar}'
!macroend
!define CharStrip '!insertmacro CharStrip'
;
!macro StrStrip Str InStr OutVar
 Push '${InStr}'
 Push '${Str}'
  Call StrStrip
 Pop '${OutVar}'
!macroend
!define StrStrip '!insertmacro StrStrip'
;
; Modern UI installer stuff
!include "MUI2.nsh"
!define MUI_ABORTWARNING
!define MUI_ICON "openquake_small.ico"

; UI pages
!insertmacro MUI_PAGE_WELCOME
!insertmacro MUI_PAGE_LICENSE "LICENSE.txt"
!ifdef VER_CODE & VER_BUILD
Page custom PageReinstall PageLeaveReinstall
!endif
!insertmacro MUI_PAGE_COMPONENTS
!define MUI_PAGE_CUSTOMFUNCTION_LEAVE DirectoryLeave
!insertmacro MUI_PAGE_DIRECTORY
!insertmacro MUI_PAGE_INSTFILES
!insertmacro MUI_PAGE_FINISH
!insertmacro MUI_LANGUAGE "English"

!ifdef VER_CODE & VER_BUILD
VIAddVersionKey "CompanyName"  "${COMP_NAME}"
VIAddVersionKey "LegalCopyright"  "${COPYRIGHT}"
VIAddVersionKey "FileDescription" "OpenQuake Setup"
VIAddVersionKey "ProductName"  "${APP_NAME}"
VIAddVersionKey "ProductVersion" "${VER_CODE}"
VIAddVersionKey "FileVersion"  "${PRODUCT_VERSION}"
VIProductVersion ${PRODUCT_VERSION}

######################################################################
!endif

Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
OutFile "${INSTALLER_NAME}"
InstallDir "$LOCALAPPDATA\Programs\${PRODUCT_NAME}"

Function .onInit
  ${IfNot} ${RunningX64}
      IfSilent +2
      MessageBox MB_OK "A 64bit OS is required"
      Quit
  ${EndIf}
  ${IfNot} ${AtLeastWin8.1}
    IfSilent +2
    MessageBox MB_OK "Your Windows version is not supported. Please use Windows 10"
	Quit
  ${EndIf}
  ${IfNot} ${AtLeastWin10}
    IfSilent +2
    MessageBox MB_OK "Your Windows version is not recommended. Use at your own risk."
  ${EndIf}

  ${If} ${FileExists} "$PROGRAMFILES${BITNESS}\${PRODUCT_NAME}\*"
      MessageBox MB_OK|MB_ICONEXCLAMATION `It looks like you have installed a previous version of the OpenQuake engine in "$PROGRAMFILES${BITNESS}\${PRODUCT_NAME}" $\r$\n $\r$\n Please stop all OpenQuake engine processes and close associated windows THEN uninstall the old engine using the "Add or Remove Programs" section of the Control Panel and then run this installer again. `
      Quit
  ${EndIf}
FunctionEnd

Function un.onInit
	MessageBox MB_OK|MB_ICONEXCLAMATION `Please stop all OpenQuake engine processes and close associated windows BEFORE pressing OK to uninstall the engine.`
FunctionEnd


Section -SETTINGS
  SetOutPath "$INSTDIR"
  SetOverwrite ifnewer
SectionEnd

Section "!Core Files" SecCore
  SectionIn RO
  SetShellVarContext current

  SetOutPath "$INSTDIR"
  File "openquake_black.ico"
  File "oq-console.bat"
  File "LICENSE.txt"

  SetOutPath "$INSTDIR\python3"
  File /r "python-dist\python3\*.*"

  SetOutPath "$PLUGINSDIR\oq-dist"
  File /r "oq-dist\*.*"
SectionEnd

Section "!OpenQuake Engine" SecEngine
  SectionIn RO
  SetOutPath "$INSTDIR"
  File "openquake.ico"
  File "oq-server.bat"
  File "README.html"
  SetOutPath "$PLUGINSDIR\oq-dist\engine"
  DetailPrint "Installing the OpenQuake Engine..."
  nsExec::ExecToLog '$INSTDIR\python3\python.exe -m pip -q install --no-deps --no-index --no-warn-script-location -r "index.txt"'
SectionEnd

Section "OpenQuake Tools" SecTools
  SetOutPath "$PLUGINSDIR\oq-dist\tools"
  DetailPrint "Installing the OpenQuake Tools..."
  nsExec::ExecToLog '$INSTDIR\python3\python.exe -m pip -q install --no-deps --no-index --no-warn-script-location -r "index.txt"'
SectionEnd

Section "OpenQuake Model Building Toolkit" SecMbtk
  SetOutPath "$PLUGINSDIR\oq-dist\mbtk"
  DetailPrint "Installing the OpenQuake Model Building Toolkit..."
  nsExec::ExecToLog '$INSTDIR\python3\python.exe -m pip -q install --no-deps --no-index --no-warn-script-location -r "index.txt"'
SectionEnd

Section "OpenQuake Engine demos and documentation" SecDocDemo
  SectionIn RO
  # Install manual and demos in 'Public\MyDocuments'
  # keep disabled for now. It may be dangerous.
  # SetOutPath "$DOCUMENTS\OpenQuake"
  # File "OpenQuake manual.pdf"
  # SetOutPath "$DOCUMENTS\OpenQuake\demos"
  # File /r /x ".gitignore" "demos\*.*"

  # Keep a copy also in the installation folder
  SetOutPath "$INSTDIR"
  File "OpenQuake manual.pdf"
  SetOutPath "$INSTDIR\demos"
  File /r /x ".gitignore" "demos\*.*"
SectionEnd

Section "!OpenQuake Engine menu icons" SecMenu
  SectionIn RO
  SetOutPath "$INSTDIR"
  CreateShortCut "$SMPROGRAMS\$COMP_NAME\OpenQuake Engine (webui).lnk" "$INSTDIR\oq-server.bat" \
      "" "$INSTDIR\openquake.ico"
  CreateShortCut "$SMPROGRAMS\$COMP_NAME\OpenQuake Engine (console).lnk" "$INSTDIR\oq-console.bat" \
      "" "$INSTDIR\openquake_black.ico"
SectionEnd

Section "!OpenQuake Engine desktop icons" SecIcon
  SectionIn RO
  SetOutPath "$INSTDIR"
  CreateShortCut "$DESKTOP\OpenQuake Engine (console).lnk" "$INSTDIR\oq-console.bat" \
      "" "$INSTDIR\openquake_black.ico"
  CreateShortCut "$DESKTOP\OpenQuake Engine (webui).lnk" "$INSTDIR\oq-server.bat" \
      "" "$INSTDIR\openquake.ico"
SectionEnd


Section -post
  SetOutPath "$INSTDIR"
  ; Byte-compile Python files.
  RMDir /r "$INSTDIR\oq-dist"
  DetailPrint "Byte-compiling Python modules..."
  nsExec::ExecToLog '$INSTDIR\python3\python.exe -m compileall -qq "$INSTDIR"'
  FileOpen $0 "$INSTDIR\python3\pycached" w
  FileClose $0

  WriteUninstaller $INSTDIR\uninstall.exe

  ; Add ourselves to Add/remove programs
  WriteRegStr HKCU "${REG_KEY}" "DisplayName" "${PRODUCT_NAME}"
  WriteRegStr HKCU "${REG_KEY}" "Publisher" "${PUBLISHER}"
  WriteRegStr HKCU "${REG_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr HKCU "${REG_KEY}" "UninstallString" "$\"$INSTDIR\uninstall.exe$\""
  WriteRegStr HKCU "${REG_KEY}" "InstallLocation" "$INSTDIR"
  WriteRegStr HKCU "${REG_KEY}" "DisplayIcon" "$INSTDIR\${PRODUCT_ICON}"
  WriteRegDWORD HKCU "${REG_KEY}" "NoModify" 1
  WriteRegDWORD HKCU "${REG_KEY}" "NoRepair" 1
  ${GetSize} "$INSTDIR" "/S=0K" $0 $1 $2
  IntFmt $0 "0x%08X" $0
  WriteRegDWORD HKCU "${REG_KEY}" "EstimatedSize" "$0"

  ; Check if we need to reboot
  IfRebootFlag 0 noreboot
    IfSilent +2
    MessageBox MB_YESNO "A reboot is required to finish the installation. Do you wish to reboot now?" \
                /SD IDNO IDNO noreboot
    Reboot
  noreboot:
SectionEnd


Section "Create Installer log"
SectionIn RO
  DetailPrint "Create Installer log"
  StrCpy $0 "$INSTDIR\install.log"
  Push $0
  Call DumpLog
SectionEnd

Section "Uninstall"
  SetShellVarContext current
  Delete "$INSTDIR\${PRODUCT_ICON}"
  RMDir /r "$INSTDIR\python3"
  ; Uninstall files
    Delete "$INSTDIR\README.html"
    Delete "$INSTDIR\LICENSE.txt"
    Delete "$INSTDIR\OpenQuake manual.pdf"
    Delete "$INSTDIR\openquake_black.ico"
    Delete "$INSTDIR\openquake.ico"
    Delete "$INSTDIR\oq-server.bat"
    Delete "$INSTDIR\oq-console.bat"
	Delete "$INSTDIR\install.log"
  ; Uninstall directories
    RMDir /r "$INSTDIR\demos"
  ; Uninstall shortcuts
    Delete "$DESKTOP\OpenQuake Engine (webui).lnk"
    Delete "$DESKTOP\OpenQuake Engine (console).lnk"
    Delete "$SMPROGRAMS\$COMP_NAME\OpenQuake Engine (webui).lnk"
    Delete "$SMPROGRAMS\$COMP_NAME\OpenQuake Engine (console).lnk"

   ;
   ; Check that INSTDIR contains only uninstall.exe
   ; See NSIS reference for FindFirst
   ;   https://nsis.sourceforge.io/Reference/FindFirst
   ; Note that the . and .. entries are also present and should be ignored.
   ; $0 is a "handle" to the Search and is used by FindNext and FindClose
   ; $1 is the current name of the file/directory under consideration
   ClearErrors
   FindFirst $0 $1 "$INSTDIR\*.*"
   loop_unexe:
     StrCmp $1 "" done_unexe ; End of List
     StrCmp $1 "." ignore_file
     StrCmp $1 ".." ignore_file
     StrCmp $1 "uninstall.exe" ignore_file found_badfile
   ignore_file:
     ClearErrors
     FindNext $0 $1
     Goto loop_unexe
   found_badfile:
     DetailPrint "Unexpected file: $1 in $INSTDIR"
     FindClose $0
     MessageBox MB_OK|MB_ICONEXCLAMATION `Unable to remove installation folder "$INSTDIR" $\r$\n Perhaps there are still processes running. $\r$\n $\r$\n Please reboot and delete the folder "$INSTDIR" and then run this installer again. `
     Abort `Uninstall failed - Please reboot and delete the folder "$INSTDIR" and then run this installer again. `
   done_unexe:
     Delete $INSTDIR\uninstall.exe
     FindClose $0

  RMDir $INSTDIR
  DeleteRegKey HKCU "${REG_KEY}"
SectionEnd

!ifdef VER_CODE & VER_BUILD

Var ReinstallPageCheck

Function PageReinstall

  ReadRegStr $R0 HKCU "Software\${PRODUCT_NAME}" ""
  ReadRegStr $R1 HKCU "${REG_KEY}" "UninstallString"
  ${IfThen} "$R0$R1" == "" ${|} Abort ${|}

  StrCpy $R4 "older"
  ReadRegDWORD $R0 HKCU "Software\${PRODUCT_NAME}" "VersionMajor"
  ReadRegDWORD $R1 HKCU "Software\${PRODUCT_NAME}" "VersionMinor"
  ReadRegDWORD $R2 HKCU "Software\${PRODUCT_NAME}" "VersionRevision"
  ReadRegDWORD $R3 HKCU "Software\${PRODUCT_NAME}" "VersionBuild"
  StrCpy $R0 $R0.$R1.$R2.$R3


  ${VersionCompare} ${VER_CODE}.${VER_BUILD} $R0 $R0
  ${If} $R0 == 0
    StrCpy $R1 "${PRODUCT_NAME} ${PRODUCT_VERSION} is already installed Click Next to continue."
    StrCpy $R2 "Uninstall ${PRODUCT_NAME}"
    !insertmacro MUI_HEADER_TEXT "Already Installed" "Choose the maintenance option to perform."
    StrCpy $R0 "2"
  ${ElseIf} $R0 == 1
    StrCpy $R1 "An $R4 version of ${PRODUCT_NAME} is installed on your system. It's recommended that you uninstall the current version before installing. Click Next to continue."
    StrCpy $R2 "Uninstall before installing"
    !insertmacro MUI_HEADER_TEXT "Already Installed" "Choose how you want to install ${PRODUCT_NAME}."
    StrCpy $R0 "1"
  ${ElseIf} $R0 == 2
    StrCpy $R1 "A newer version of ${PRODUCT_NAME} is already installed! It is not recommended that you install an older version. Click Next to continue."
    StrCpy $R2 "Uninstall before installing"
    !insertmacro MUI_HEADER_TEXT "Already Installed" "Choose how you want to install ${PRODUCT_NAME}."
    StrCpy $R0 "1"
  ${Else}
    Abort
  ${EndIf}

  nsDialogs::Create 1018
  Pop $R4

  ${NSD_CreateLabel} 0 0 100% 24u $R1
  Pop $R1

  ${NSD_CreateRadioButton} 30u 50u -30u 8u $R2
  Pop $R2
  ${NSD_OnClick} $R2 PageReinstallUpdateSelection

  ${If} $ReinstallPageCheck != 2
    SendMessage $R2 ${BM_SETCHECK} ${BST_CHECKED} 0
  ${Else}
    SendMessage $R3 ${BM_SETCHECK} ${BST_CHECKED} 0
  ${EndIf}

  ${NSD_SetFocus} $R2

  nsDialogs::Show

FunctionEnd

Function PageReinstallUpdateSelection

  Pop $R1

  ${NSD_GetState} $R2 $R1

  ${If} $R1 == ${BST_CHECKED}
    StrCpy $ReinstallPageCheck 1
  ${Else}
    StrCpy $ReinstallPageCheck 2
  ${EndIf}

FunctionEnd

Function PageLeaveReinstall

  ${NSD_GetState} $R2 $R1

; Disable check versions to skip reinstall same version
;  StrCmp $R0 "1" 0 +2 ; Existing install is not the same version?
;  StrCmp $R1 "1" reinst_uninstall reinst_done
;
;  StrCmp $R1 "1" reinst_done ; Same version, skip to add/reinstall components?

  reinst_uninstall:
	; NOTE that value in $R1 is _already_ quoted with double-quotes
    ReadRegStr $R1 HKCU "${REG_KEY}" "UninstallString"

    ;Run uninstaller
    HideWindow

    ClearErrors
    ; https://stackoverflow.com/questions/24595887/waiting-for-nsis-uninstaller-to-finish-in-nsis-installer-either-fails-or-the-uni
    ; suggests that the standard command to run the old uninstaller:
    ;   ExecWait '$R1 _?=$INSTDIR' $0
    ; will keep (old) uninstall.exe open and so prevent
    ; it from deleting itself.  This is a problem since the install folder will
    ; not be deleted, and the installer will refuse to proceed.
    ; See also:
    ;
    ; Copy old uninstaller to a temporary folder and run from there
	; https://stackoverflow.com/questions/26949675/nsis-copyfiles-directive-not-working-with-variables-as-parameters
    ; CopyFiles fails silently if variable contains ""
	; Use CharStrip to remove the quotes
	;
    ${CharStrip} "$\"" $R1 $R2
    InitPluginsDir
    CreateDirectory "$PLUGINSDIR\unold"
    CopyFiles "$R2" "$PLUGINSDIR\unold"
    ExecWait '$PLUGINSDIR\unold\uninstall.exe _?=$INSTDIR' $0

    ; Make window visible again
    BringToFront

    ${IfThen} ${Errors} ${|} StrCpy $0 2 ${|} ; ExecWait failed, set fake exit code

  reinst_done:

FunctionEnd


Function DumpLog
  Exch $5
  Push $0
  Push $1
  Push $2
  Push $3
  Push $4
  Push $6
  FindWindow $0 "#32770" "" $HWNDPARENT
  GetDlgItem $0 $0 1016
  StrCmp $0 0 exit
  FileOpen $5 $5 "w"
  StrCmp $5 "" exit
    SendMessage $0 ${LVM_GETITEMCOUNT} 0 0 $6
    System::Call '*(&t${NSIS_MAX_STRLEN})p.r3'
    StrCpy $2 0
    System::Call "*(i, i, i, i, i, p, i, i, i) p  (0, 0, 0, 0, 0, r3, ${NSIS_MAX_STRLEN}) .r1"
    loop: StrCmp $2 $6 done
      System::Call "User32::SendMessage(p, i, p, p) p ($0, ${LVM_GETITEMTEXT}, $2, r1)"
      System::Call "*$3(&t${NSIS_MAX_STRLEN} .r4)"
      !ifdef DumpLog_As_UTF16LE
      FileWriteUTF16LE ${DumpLog_As_UTF16LE} $5 "$4$\r$\n"
      !else
      FileWrite $5 "$4$\r$\n" ; Unicode will be translated to ANSI!
      !endif
      IntOp $2 $2 + 1
      Goto loop
    done:
      FileClose $5
      System::Free $1
      System::Free $3
  exit:
    Pop $6
    Pop $4
    Pop $3
    Pop $2
    Pop $1
    Pop $0
    Pop $5
FunctionEnd
!endif


Function DirectoryLeave

 ${If} ${FileExists} "$InstDir\*.*"
    MessageBox MB_OK|MB_ICONEXCLAMATION `"$INSTDIR" already exists $\r$\n Perhaps there are still processes running. $\r$\n $\r$\n Please reboot and delete the folder "$INSTDIR" and then run this installer again.`
     Quit
 ${EndIf}

FunctionEnd

Function CharStrip
Exch $R0 #char
Exch
Exch $R1 #in string
Push $R2
Push $R3
Push $R4
 StrCpy $R2 -1
 IntOp $R2 $R2 + 1
 StrCpy $R3 $R1 1 $R2
 StrCmp $R3 "" +8
 StrCmp $R3 $R0 0 -3
  StrCpy $R3 $R1 $R2
  IntOp $R2 $R2 + 1
  StrCpy $R4 $R1 "" $R2
  StrCpy $R1 $R3$R4
  IntOp $R2 $R2 - 2
  Goto -9
  StrCpy $R0 $R1
Pop $R4
Pop $R3
Pop $R2
Pop $R1
Exch $R0
FunctionEnd

Function StrStrip
Exch $R0 #string
Exch
Exch $R1 #in string
Push $R2
Push $R3
Push $R4
Push $R5
 StrLen $R5 $R0
 StrCpy $R2 -1
 IntOp $R2 $R2 + 1
 StrCpy $R3 $R1 $R5 $R2
 StrCmp $R3 "" +9
 StrCmp $R3 $R0 0 -3
  StrCpy $R3 $R1 $R2
  IntOp $R2 $R2 + $R5
  StrCpy $R4 $R1 "" $R2
  StrCpy $R1 $R3$R4
  IntOp $R2 $R2 - $R5
  IntOp $R2 $R2 - 1
  Goto -10
  StrCpy $R0 $R1
Pop $R5
Pop $R4
Pop $R3
Pop $R2
Pop $R1
Exch $R0
FunctionEnd
