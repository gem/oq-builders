name: OLD Nightly Windows Installer for oq-engine
on:
  push:
  schedule:
    - cron: "0 5 * * 5"
jobs:
  Build_Installer:
    runs-on: windows-latest
    env:
      GIT_BRANCH: ${{ github.ref }}
      GIT_COMMIT_SHA: ${{ github.sha }}
    steps:
      - name: Set up Python using embedded distribution and create Installer
        env:
          GIT_BRANCH: ${{ github.ref }}
          GIT_COMMIT_SHA: ${{ github.sha }}
        run: |
          Write-Host "Working Path: ${Env:GITHUB_WORKSPACE}"
          $branchName = $Env:GITHUB_REF -replace 'refs/heads/', ''
          Write-Host "Branch: ${branchName}"
          Write-Host "CURRENT_BRANCH=${branchName}" >> $Env:GITHUB_ENV
          Write-Host "Branch: ${branchName}"
          #
          cd C:\Users\runneradmin
          curl  https://www.python.org/ftp/python/3.8.10/python-3.8.10-embed-amd64.zip --output python.zip
          unzip.exe python.zip -d python
          Write-Host "install pip and wheel and setuptools and markdown"
          cd python
          curl https://bootstrap.pypa.io/get-pip.py --output get-pip.py
          .\python.exe .\get-pip.py
          mv .\python38._pth .\python38._pth.old
          $Env:PY_PIP = "C:\Users\runneradmin\python\Scripts"
          $Env:PY_LIBS = "C:\Users\runneradmin\python\Lib;C:\Users\runneradmin\python\Lib\site-package"
          $Env:PY_HOME = "C:\Users\runneradmin\python"
          $ENV:PATH="C:\Users\runneradmin\python\Scripts;$ENV:PATH"
          .\python.exe -m pip install pip wheel --upgrade
          .\python.exe -m pip install markdown==3.2.2
          Set-Alias -Name python -Value C:\Users\runneradmin\python\python.exe
          Set-Alias -Name pip -Value C:\Users\runneradmin\python\Scripts\pip.exe
          cd ~
          Write-Host "Branch: ${branchName}"
          git clone -q  --depth=1 -b ${branchName} https://github.com/gem/oq-builders
          cd .\oq-builders\installers\windows\nsis\
          git clone --depth=1 -b ${branchName} https://github.com/gem/oq-engine.git
          Write-Host "Generating zip of demos"
          $copyto = "C:\Users\runneradmin\oq-builders\installers\windows\nsis\demos\"
          Get-ChildItem $copyto | Format-List
          cd oq-engine\demos\
          $demos = ("hazard", "risk")
          foreach ($element in $demos) {
            $path = "C:\Users\runneradmin\oq-builders\installers\windows\nsis\oq-engine\demos\" + $element
            $source = Get-ChildItem -Path .\$element -Directory
            Foreach ($s in $source) {
            Add-Type -assembly "system.io.compression.filesystem"
            $destination = Join-path -path $path -ChildPath "$($s.name).zip"
            [io.compression.zipfile]::CreateFromDirectory($s.fullname, $destination)
            }
            Get-ChildItem *.zip | Format-List
            $zipfolder = $copyto + $element
            md $zipfolder
            Write-Host "Copy-Item *.zip -Destination $zipfolder"
            Copy-Item *.zip -Destination $zipfolder
            Get-ChildItem $zipfolder | Format-List
          }
          cd ..
          python -m pip install install -r requirements-py38-win64.txt
          cd ..
          python -m pip wheel --disable-pip-version-check --no-deps -w oq-dist/engine ./oq-engine
          Write-Host "Downloading standalone apps"
          $app = ("oq-platform-standalone", "oq-platform-ipt", "oq-platform-taxonomy", "oq-platform-taxtweb")
          foreach ($element in $app) {
              Write-Host "Branch: ${branchName}"
              git clone --depth=1 -b ${branchName} https://github.com/gem/$element.git
              python -m pip wheel --disable-pip-version-check --no-deps -w oq-dist/tools ./$element
              if ( $element -eq "oq-platform-taxtweb" ) 
              {
                $Env:PYBUILD_NAME = "oq-taxonomy"
                python -m pip -q wheel --disable-pip-version-check --no-deps -w oq-dist/tools ./$element
              }    
          }
          cd ~
          cd .\oq-builders\installers\windows\nsis\
          Get-ChildItem
          python -m markdown .\oq-engine\README.md > .\README.html
          Copy-Item -Path "C:\Users\runneradmin\python\" -Destination "C:\Users\runneradmin\oq-builders\installers\windows\nsis\" -Recurse
          $files = @(Get-ChildItem .\oq-dist\engine\*.whl)
          $files.Name > .\oq-dist\engine\index.txt
          $files = @(Get-ChildItem .\oq-dist\tools\*.whl)
          $files.Name > .\oq-dist\tools\index.txt
          curl.exe -LO https://ci.openquake.org/job/builders/job/pdf-builder/lastSuccessfulBuild/artifact/oq-engine/doc/manual/oq-manual.pdf
          Rename-Item .\oq-manual.pdf "Openquake manual.pdf"
          Copy-Item -Path "C:\Users\runneradmin\oq-builders\installers\windows\nsis\oq-engine\doc" -Destination "C:\Users\runneradmin\oq-builders\installers\windows\nsis\" -Recurse
          Write-Host "Generating NSIS installer with oq version and time of git"
          $version = Select-String -Path .\oq-engine\openquake\baselib\__init__.py -Pattern '__version__ ='
          $pattern = "(?<=\').+?(?=\')"
          $inst_version = [regex]::Matches($version, $pattern).Value
          $time_of_git = git -C .\oq-engine log -n1 --pretty='format:%cd' --date=format:'%y%m%d%H%M'
          Write-Host "version: ${inst_version} and time: ${time_of_git}"
          (Get-Content -Path .\installer.nsi.win -Raw) -replace 'CHANGETIME', $time_of_git -replace 'CHANGEHERERELEASE', $inst_version | Set-Content -Path .\installer.nsi
          makensis /V4 installer.nsi
          mkdir out
          Copy-Item *.exe .\out
          $Install = Get-ChildItem -Filter *.exe 
          Get-FileHash $Install | Select-Object Hash
          $hash = Get-FileHash $Install -Algorithm SHA256
          $sha256 = $hash.Hash
          $Name = $Install.Name
          $Outfile = $Install.Name + ".sha256" 
          Write-Output $hash.Hash  $Install.Name > $Outfile
          Copy-Item $Outfile .\out
          #
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Installer
          path: C:\Users\runneradmin\oq-builders\installers\windows\nsis\out
          #
  Test_Installer:
    needs: Build_Installer
    runs-on: windows-latest
    steps:
      - name: Download Windows Installer from build job
        uses: actions/download-artifact@v2
        with:
          name: Installer
      - name: Execute the Installer
        run: |
          $Install = Get-ChildItem -Filter *.exe
          Start-Process -FilePath $Install.Fullname -ArgumentList "/S" -Wait
          cd "C:\Program Files\OpenQuake Engine\"
          $env:PATH="C:\Program Files\OpenQuake Engine\python\Scripts"
          Write-Host ${env:PATH}
          pwd
      - name: Run oq 
        run: |
          set mypath="C:\Program Files\OpenQuake Engine"
          set PATH=%mypath%\python;%mypath%\python\Scripts;%PATH%
          Write-Host %PATH%
          oq --version
          oq.exe engine --run "https://downloads.openquake.org/pkgs/test_event_based_risk_inputs_bc.zip"
        shell: cmd
  Upload_Installer:
    needs: Build_Installer
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v2
      - name: Download Windows Installer from build job
        uses: actions/download-artifact@v2
        with:
          name: Installer
      - name: rsync to downloads.openquake.org
        shell: bash
        env:
          DOWNLOAD_SSH: ${{ secrets.DOWNLOAD_ARTIFACTS }}
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$DOWNLOAD_SSH" --output ./.deploy_rsa ./.oq_builders.enc
          chmod 600 ./.deploy_rsa
          eval $(ssh-agent -s) && ssh-add ./.deploy_rsa 
          rsync -e 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 332' -ax OpenQuake_Engine* ftp@downloads.openquake.org:/mnt/box/openquake/downloads/pkgs/windows/oq-engine/nightly/
