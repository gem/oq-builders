name: brew method for macOS GDAL whl
on:
  push:
    branches: [ae-macosm1]
  workflow_dispatch:
jobs:
  wheel_of_GDAL:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
         - os: macos-10.15
           arch: x86_64
           os_architectures: x86_64
             #         - os: self-gem
             #           arch: arm64
             #           cmake_osx_architectures: arm64
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install gdal using brew and download sources
        run: |
          echo "Input GDAL version: $gdalref"
          echo "brew install gdal"
          brew install gdal
          echo "directory"
          pwd
          echo " gdalinfo --version"
          gdalinfo --version
          python -m pip install numpy 
          pip3 download GDAL==3.5.1 
          tar -xvzf GDAL-3.5.1.tar.gz 
      - name: build wheel
        uses: pypa/cibuildwheel@v2.8.0
        with:
          package-dir: ./GDAL-3.5.1
        env:
          CIBW_BUILD: cp39-*
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_BUILD_VERBOSITY: 2
          CIBW_ENVIRONMENT_MACOS:
            MACOSX_DEPLOYMENT_TARGET=10.9
            CMAKE_OSX_ARCHITECTURES='${{ matrix.arch }}'
            CIBW_ARCHS_MACOS='${{ matrix.arch }}'
      - name: Upload artifacts of wheel
        uses: actions/upload-artifact@v2
        with:
          name: gdal_wheel
          path: ~/wheelhouse/*.whl
#
  test_of_GDAL:
    needs: wheel_of_GDAL
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        python-version: [3.9]
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: download artifact
        uses: actions/download-artifact@v2
        id: download
        with:
          name: gdal_wheel
          path: ~/wheelhouse/
      - name: 'Echo artifact download path'
        run: echo ${{steps.download.outputs.download-path}}
      - name: Test Gdal with python
        shell: bash
        run: |
          export PIP_DEFAULT_TIMEOUT=100
          echo "engine installation to test GDAL wheel"
          cd ~
          python -m venv ~/openquake/
          echo "source ~/openquake/bin/activate"
          source ~/openquake/bin/activate
          python -c "import sys; print(sys.version)"
          git clone https://github.com/gem/oq-engine.git
          cd oq-engine
          pip install -U pip wheel setuptools
          pip install pytest
          pip install -e .
          pip install numpy
          cd ${{steps.download.outputs.download-path}}
          pwd
          ls -lrt
          #wheel="$(ls *`echo ${{ matrix.python-version }} | tr -d .`*.whl)"
          wheel="$(ls | tr -d .`*.whl)"
          echo ${wheel}
          pip install ${wheel}
          cd ~/oq-engine
          python -c "import openquake"
          pytest openquake/sep/tests/test_utils.py
